// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Type {
    id          String       @id @default(cuid())
    name        String
    description String?
    borrowable  Boolean?     @default(false)
    items       Item[]
    users       UserRights[]
}

model Status {
    id          String   @id @default(cuid())
    name        String
    description String?
    borrowable  Boolean? @default(false)
    statusId    String?
    items       Item[]
}

model Service {
    id          String   @id @default(cuid())
    title       String
    description String?
    price       Float?
    date        DateTime @default(now()) @db.Date
    managerId   String
    manager     User     @relation(fields: [managerId], references: [id])
    itemId      String
    items       Item     @relation(fields: [itemId], references: [id])
}

model Item {
    id          String    @id @default(cuid())
    number      String
    brand       String?
    model       String?
    description String?
    price       Float?
    date        DateTime  @db.Date
    statusId    String
    status      Status    @relation(fields: [statusId], references: [id])
    typeId      String
    type        Type      @relation(fields: [typeId], references: [id])
    borrowerId  String
    borrower    User      @relation(fields: [borrowerId], references: [id])
    services    Service[]
}

model User {
    id            String       @id @default(cuid())
    lastname      String?
    firstname     String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    items         Item[]
    services      Service[]
    rights        UserRights[]
}

model UserRights {
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    typeId String
    type   Type   @relation(fields: [typeId], references: [id], onDelete: Cascade)

    @@id([userId, typeId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
